{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'format_multitopic/courseformat/content/section/cmitem';\nimport Templates from 'core/templates';\nimport DispatchActions from 'format_multitopic/courseformat/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n        this.version = descriptor.version;\n        this.originalsinglesectionid = this.element.querySelector(\"ul.sections\").dataset.originalsinglesectionid;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @param {number} version Moodle version number\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn, version) {\n        return new this({ // CHANGED.\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n            version,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this); // CHANGED.\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            (this.version >= 2023081800) ? document : document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n\n        // Set the initial state of collapsible sections.\n        this.fmtCollapseOnHashChange();\n\n        // Capture clicks on course section links.\n        window.addEventListener(\"hashchange\", this.fmtCollapseOnHashChange.bind(this));\n\n    }\n\n    /**\n     * Expand, and scroll to, the section specified in the URL bar.\n     *\n     * @param {HashChangeEvent?} event The triggering event, if any\n     */\n    /* eslint-disable no-unused-vars */\n    fmtCollapseOnHashChange(event) {\n            /* eslint-enable no-unused-vars */\n\n        // Find the specified section.\n        let anchor = window.location.hash;\n        if (!anchor.match(/^#sectionid-\\d+(?:-title)?$/)) {\n            return;\n        }\n        let oldStyle = false;\n        if (anchor.match(/^#sectionid-\\d+$/)) {\n            anchor = anchor + \"-title\";\n            oldStyle = true;\n            history.replaceState(history.state, \"\", anchor);\n        }\n        const selSectionHeaderDom =\n            document.querySelector(\".course-content ul.sections li.section.section-topic .sectionname\" + anchor);\n\n        // Exit if there is no recognised section.\n        if (!selSectionHeaderDom) {\n            return;\n        }\n\n        const selSectionDom = selSectionHeaderDom.closest(\"li.section.section-topic\");\n        const sectionId = selSectionDom.getAttribute('data-id');\n        const section = this.reactive.get('section', sectionId);\n\n        // Expand, if appropriate.\n        if (selSectionDom.matches(\".section-topic-collapsible\")\n                && (selSectionDom.querySelector(\".course-section-header .icons-collapse-expand.collapsed\")\n                    || section.contentcollapsed)) {\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                false\n            );\n        }\n\n        // Scroll to the specified section.\n        if (oldStyle) {\n            selSectionDom.scrollIntoView();\n        }\n\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        // CHANGED.\n        let sectionlist = [];\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionlist.push(sectionlistDom[sectionCount].dataset.id);\n        }\n        // END CHANGED.\n\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionlist, // CHANGED.\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        // ADDED.\n        let sectionCollapsible = {};\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionCollapsible[sectionlistDom[sectionCount].dataset.id] = true;\n        }\n        // END ADDED.\n        state.section.forEach(\n            section => {\n                if (sectionCollapsible[section.id]) { // ADDED.\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        target.style.display = (allexpanded && allcollapsed) ? \"none\" : \"block\"; // ADDED.\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '' || element.timed) { // CHANGED.\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id\n                    && (currentvalue != element.rawtitle || element.rawtitle == '' || element.timed)) { // CHANGED.\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details (Moodle <4.4).\n     * @param {Object} param.state the full state object (Moodle >=4.4).\n     */\n    _refreshCourseSectionlist(param) {\n        super._refreshCourseSectionlist(param);\n        const originalSingleSection = this.reactive.get(\"section\", this.originalsinglesectionid);\n        const singleSectionId = originalSingleSection ?\n                                (originalSingleSection.levelsan < 2 ? originalSingleSection.id : originalSingleSection.pageid)\n                                : null;\n        const sectionsDom = this.element.querySelectorAll(this.selectors.SECTION);\n        for (let sdi = 0; sdi < sectionsDom.length; sdi++) {\n            const sectionDom = sectionsDom[sdi];\n            const section = this.reactive.get(\"section\", sectionDom.dataset.id);\n            if (!section) {\n                continue;\n            }\n            let refreshCms = false;\n            const pageSectionDisplay = (section.pageid == singleSectionId);\n            if (sectionDom.dataset.fmtonpage != pageSectionDisplay) {\n                sectionDom.dataset.fmtonpage = pageSectionDisplay;\n                sectionDom.style.display = (pageSectionDisplay == \"1\") ? \"block\" : \"none\";\n                if (pageSectionDisplay == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (section.visible == sectionDom.classList.contains(\"hidden\")) {\n                const badgeDom = sectionDom.querySelector(\"span.badge[data-type='hiddenfromstudents']\");\n                if (section.visible) {\n                    sectionDom.classList.remove(\"hidden\");\n                    if (badgeDom) {\n                        badgeDom.classList.add(\"d-none\");\n                    }\n                } else {\n                    sectionDom.classList.add(\"hidden\");\n                    if (badgeDom) {\n                        badgeDom.classList.remove(\"d-none\");\n                    }\n                }\n                if (sectionDom.dataset.fmtonpage == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (refreshCms) {\n                // Note: Visibility state doesn't get updated for CMs already rendered.\n                this._refreshSectionCmlist({element: section});\n            }\n            const menuDom = sectionDom.querySelector(\".course-section-header .section_action_menu\");\n            Templates.render(\"core_courseformat/local/content/section/controlmenu\", section.controlmenu).done(function(html) {\n                Templates.replaceNode(menuDom, html, \"\");\n            });\n        }\n        this._refreshAllSectionsToggler(this.reactive.stateManager.state);\n\n        // Update Add section button if necessary.\n        const addSectionDom = /*this.element*/document.querySelector(\"div#course-addsection > a\");\n        if (addSectionDom.dataset.intoId != singleSectionId) {\n            addSectionDom.dataset.intoId = singleSectionId;\n            addSectionDom.href = addSectionDom.href.replace(/\\binsertparentid=\\d+\\b/, \"insertparentid=\" + singleSectionId);\n        }\n\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item); // CHANGED.\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item); // CHANGED.\n            }\n        );\n    }\n\n}"],"names":["Component","BaseComponent","create","descriptor","version","originalsinglesectionid","this","element","querySelector","dataset","target","selectors","sectionReturn","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","TOGGLEALL","collapseElementIds","getElements","COLLAPSE","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","classes","STATEDREADY","CourseEvents","manualCompletionToggled","_completionHandler","PAGE","_scrollHandler","fmtCollapseOnHashChange","window","bind","event","anchor","location","hash","match","oldStyle","history","replaceState","selSectionHeaderDom","selSectionDom","closest","sectionId","getAttribute","section","get","matches","contentcollapsed","dispatch","scrollIntoView","preventDefault","isAllCollapsed","contains","COLLAPSED","sectionlist","sectionlistDom","querySelectorAll","sectionCount","length","push","allcollapsed","allexpanded","sectionCollapsible","forEach","style","display","remove","_refreshSectionNumber","SECTION","number","sectionid","inplace","inplaceeditable","getInplaceEditable","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","timed","rawtitle","setValue","_refreshCourseSectionlist","param","originalSingleSection","singleSectionId","levelsan","pageid","sectionsDom","sdi","sectionDom","refreshCms","pageSectionDisplay","fmtonpage","visible","badgeDom","_refreshSectionCmlist","menuDom","render","controlmenu","done","html","replaceNode","stateManager","addSectionDom","intoId","href","replace","_scanIndex","sections","item","Section","CM","cms","CmItem"],"mappings":"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"}