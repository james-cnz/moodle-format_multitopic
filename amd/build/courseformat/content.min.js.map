{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n     static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n     _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '' || element.timed) { // CHANGED.\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id\n                    && (currentvalue != element.rawtitle || element.rawtitle == '' || element.timed)) { // CHANGED.\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n\n        const pageSectionHTML = document.querySelector(\".course-section[data-id='\" + element.pageid + \"']\");\n        const pageSectionDisplay = pageSectionHTML.dataset.fmtonpage;\n        if (target.dataset.fmtonpage != pageSectionDisplay) {\n            target.dataset.fmtonpage = pageSectionDisplay;\n            target.style.display = (pageSectionDisplay == \"1\") ? \"block\" : \"none\";\n            if (pageSectionDisplay == \"1\") {\n                this._refreshSectionCmlist({element});\n            }\n        }\n\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n     _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n}"],"names":["Component","BaseComponent","target","selectors","sectionReturn","element","document","getElementById","reactive","_refreshSectionNumber","this","getElement","SECTION","id","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","querySelector","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","timed","rawtitle","setValue","pageSectionDisplay","pageid","fmtonpage","style","display","_refreshSectionCmlist","_indexContents","_scanIndex","sections","item","Section","CM","cms","CmItem"],"mappings":";;;;;;;;;mRA+BqBA,kBAAkBC,6BAUtBC,OAAQC,UAAWC,sBACrB,IAAIJ,UAAU,CACjBK,QAASC,SAASC,eAAeL,QACjCM,UAAU,0CACVL,UAAAA,UACAC,cAAAA,gBAiBPK,gCAAsBJ,QAACA,oBAEdH,OAASQ,KAAKC,WAAWD,KAAKP,UAAUS,QAASP,QAAQQ,QAC1DX,cAKLA,OAAOW,qBAAgBR,QAAQS,QAI/BZ,OAAOa,QAAQC,UAAYX,QAAQS,OAEnCZ,OAAOa,QAAQD,OAAST,QAAQS,aAG1BG,QAAUC,0BAAgBC,mBAAmBjB,OAAOkB,cAAcV,KAAKP,UAAUkB,kBACnFJ,QAAS,OAGHK,aAAeL,QAAQM,WACvBC,cAAgBP,QAAQQ,aAEH,KAAvBR,QAAQM,YAAqBlB,QAAQqB,SAEjCF,eAAiBnB,QAAQQ,IACrBS,cAAgBjB,QAAQsB,UAAgC,IAApBtB,QAAQsB,WAAkBtB,QAAQqB,OAC1ET,QAAQW,SAASvB,QAAQsB,iBAM/BE,mBADkBvB,SAASc,cAAc,4BAA8Bf,QAAQyB,OAAS,MACnDf,QAAQgB,UAC/C7B,OAAOa,QAAQgB,WAAaF,qBAC5B3B,OAAOa,QAAQgB,UAAYF,mBAC3B3B,OAAO8B,MAAMC,QAAiC,KAAtBJ,mBAA6B,QAAU,OACrC,KAAtBA,yBACKK,sBAAsB,CAAC7B,QAAAA,WAWvC8B,sBAEQC,WACD1B,KAAKP,UAAUS,QACfF,KAAK2B,UACJC,MACU,IAAIC,iBAAQD,aAKtBF,WACD1B,KAAKP,UAAUqC,GACf9B,KAAK+B,KACJH,MACU,IAAII,gBAAOJ"}