{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        let sectionlist = [];\n        const sectionlistDom = document.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (var sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionlist.push(sectionlistDom[sectionCount].dataset.id);\n        }\n\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionlist,\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        let sectionCollapsible = {};\n        const sectionlistDom = document.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (var sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionCollapsible[sectionlistDom[sectionCount].dataset.id] = true;\n        }\n        state.section.forEach(\n            section => {\n                if (sectionCollapsible[section.id]) {\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        target.style.display = (allexpanded && allcollapsed) ? \"none\" : \"block\";\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '' || element.timed) { // CHANGED.\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id\n                    && (currentvalue != element.rawtitle || element.rawtitle == '' || element.timed)) { // CHANGED.\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        super._refreshCourseSectionlist({element});\n        const state = this.reactive.stateManager.state;\n        const sections = state.section;\n        const sectionsDom = this.element.querySelectorAll(this.selectors.SECTION);\n        for (var sdi = 0; sdi < sectionsDom.length; sdi++) {\n            const sectionDom = sectionsDom[sdi];\n            const section = sections.get(sectionDom.dataset.id);\n            let refreshCms = false;\n            const pageSectionHTML = this.element.querySelector(\".course-section[data-id='\" + section.pageid + \"']\");\n            const pageSectionDisplay = pageSectionHTML.dataset.fmtonpage;\n            if (sectionDom.dataset.fmtonpage != pageSectionDisplay) {\n                sectionDom.dataset.fmtonpage = pageSectionDisplay;\n                sectionDom.style.display = (pageSectionDisplay == \"1\") ? \"block\" : \"none\";\n                if (pageSectionDisplay == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (section.visible == sectionDom.classList.contains(\"hidden\")) {\n                const badgeDom = sectionDom.querySelector(\"span.badge[data-type='hiddenfromstudents']\");\n                if (section.visible) {\n                    sectionDom.classList.remove(\"hidden\");\n                    badgeDom.classList.add(\"d-none\");\n                } else {\n                    sectionDom.classList.add(\"hidden\");\n                    badgeDom.classList.remove(\"d-none\");\n                }\n                if (sectionDom.dataset.fmtonpage == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (refreshCms) {\n                // Note: Visibility state doesn't get updated for CMs already rendered.\n                this._refreshSectionCmlist({element: section});\n            }\n        }\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n}"],"names":["Component","BaseComponent","target","selectors","sectionReturn","element","document","getElementById","reactive","_allSectionToggler","event","preventDefault","isAllCollapsed","closest","this","TOGGLEALL","classList","contains","classes","COLLAPSED","sectionlist","sectionlistDom","querySelectorAll","sectionCount","length","push","dataset","id","dispatch","_refreshAllSectionsToggler","state","getElement","allcollapsed","allexpanded","sectionCollapsible","section","forEach","contentcollapsed","style","display","add","setAttribute","remove","_refreshSectionNumber","SECTION","number","sectionid","inplace","inplaceeditable","getInplaceEditable","querySelector","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","timed","rawtitle","setValue","_refreshCourseSectionlist","stateManager","sections","sectionsDom","sdi","sectionDom","get","refreshCms","pageSectionDisplay","pageid","fmtonpage","visible","badgeDom","_refreshSectionCmlist","_indexContents","_scanIndex","item","Section","CM","cms","CmItem"],"mappings":"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"}