{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\nimport DispatchActions from 'format_multitopic/courseformat/content/actions'; // CHANGED.\nimport * as CourseEvents from 'core_course/events';\nimport Templates from 'core/templates';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({ // CHANGED.\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this); // CHANGED.\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n\n        // Set the initial state of collapsible sections.\n        this.fmtCollapseOnHashChange();\n\n        // Capture clicks on course section links.\n        window.addEventListener(\"hashchange\", this.fmtCollapseOnHashChange);\n\n    }\n\n    /**\n     * Expand, and scroll to, the section specified in the URL bar.\n     *\n     * @param {HashChangeEvent?} event The triggering event, if any\n     */\n    /* eslint-disable no-unused-vars */\n    fmtCollapseOnHashChange(event) {\n            /* eslint-enable no-unused-vars */\n\n        // Find the specified section.\n        const anchor = window.location.hash.substr(1);\n        const selSectionDom = anchor ?\n            document.querySelector(\"body.format-multitopic .course-content ul.sections li.section.section-topic.\" + anchor)\n            : null;\n\n        // Exit if there is no recognised section.\n        if (!selSectionDom) {\n            return;\n        }\n\n        const sectionId = selSectionDom.getAttribute('data-id');\n        const section = this.reactive.get('section', sectionId);\n\n        // Expand, if appropriate.\n        if (selSectionDom.matches(\".section-topic-collapsible\")\n                && (selSectionDom.querySelector(\".course-section-header .icons-collapse-expand.collapsed\")\n                    || section.contentcollapsed)) {\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                false\n            );\n        }\n\n        // Scroll to the specified section.\n        selSectionDom.scrollIntoView();\n\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        // CHANGED.\n        let sectionlist = [];\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionlist.push(sectionlistDom[sectionCount].dataset.id);\n        }\n        // END CHANGED.\n\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionlist, // CHANGED.\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        // ADDED.\n        let sectionCollapsible = {};\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionCollapsible[sectionlistDom[sectionCount].dataset.id] = true;\n        }\n        // END ADDED.\n        state.section.forEach(\n            section => {\n                if (sectionCollapsible[section.id]) { // ADDED.\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        target.style.display = (allexpanded && allcollapsed) ? \"none\" : \"block\"; // ADDED.\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '' || element.timed) { // CHANGED.\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id\n                    && (currentvalue != element.rawtitle || element.rawtitle == '' || element.timed)) { // CHANGED.\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        super._refreshCourseSectionlist({element});\n        const sectionsDom = this.element.querySelectorAll(this.selectors.SECTION);\n        for (let sdi = 0; sdi < sectionsDom.length; sdi++) {\n            const sectionDom = sectionsDom[sdi];\n            const section = this.reactive.get(\"section\", sectionDom.dataset.id);\n            let refreshCms = false;\n            const pageSectionDom = this.element.querySelector(\".course-section[data-id='\" + section.pageid + \"']\");\n            const pageSectionDisplay = pageSectionDom.dataset.fmtonpage;\n            if (sectionDom.dataset.fmtonpage != pageSectionDisplay) {\n                sectionDom.dataset.fmtonpage = pageSectionDisplay;\n                sectionDom.style.display = (pageSectionDisplay == \"1\") ? \"block\" : \"none\";\n                if (pageSectionDisplay == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (section.visible == sectionDom.classList.contains(\"hidden\")) {\n                const badgeDom = sectionDom.querySelector(\"span.badge[data-type='hiddenfromstudents']\");\n                if (section.visible) {\n                    sectionDom.classList.remove(\"hidden\");\n                    badgeDom.classList.add(\"d-none\");\n                } else {\n                    sectionDom.classList.add(\"hidden\");\n                    badgeDom.classList.remove(\"d-none\");\n                }\n                if (sectionDom.dataset.fmtonpage == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (refreshCms) {\n                // Note: Visibility state doesn't get updated for CMs already rendered.\n                this._refreshSectionCmlist({element: section});\n            }\n            const menuDom = sectionDom.querySelector(\".course-section-header .section_action_menu\");\n            Templates.render(\"core_courseformat/local/content/section/controlmenu\", section.controlmenu).done(function(html) {\n                Templates.replaceNode(menuDom, html, \"\");\n            });\n        }\n        this._refreshAllSectionsToggler(this.reactive.stateManager.state);\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item); // CHANGED.\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n}"],"names":["Component","BaseComponent","target","selectors","sectionReturn","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","TOGGLEALL","collapseElementIds","getElements","COLLAPSE","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","classes","STATEDREADY","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","PAGE","_scrollHandler","fmtCollapseOnHashChange","window","event","anchor","location","hash","substr","selSectionDom","sectionId","getAttribute","section","get","matches","contentcollapsed","dispatch","scrollIntoView","preventDefault","isAllCollapsed","closest","contains","COLLAPSED","sectionlist","sectionlistDom","querySelectorAll","sectionCount","length","push","dataset","allcollapsed","allexpanded","sectionCollapsible","forEach","style","display","remove","_refreshSectionNumber","SECTION","number","sectionid","inplace","inplaceeditable","getInplaceEditable","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","timed","rawtitle","setValue","_refreshCourseSectionlist","sectionsDom","sdi","sectionDom","refreshCms","pageSectionDisplay","pageid","fmtonpage","visible","badgeDom","_refreshSectionCmlist","menuDom","render","controlmenu","done","html","replaceNode","stateManager","_scanIndex","sections","item","Section","CM","cms","CmItem"],"mappings":"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"}