{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'format_multitopic/courseformat/content/section/cmitem';\nimport Templates from 'core/templates';\nimport DispatchActions from 'format_multitopic/courseformat/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n        this.version = descriptor.version;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @param {number} version Moodle version number\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn, version) {\n        return new this({ // CHANGED.\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n            version,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this); // CHANGED.\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            (this.version >= 2023081800) ? document : document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n\n        // Set the initial state of collapsible sections.\n        this.fmtCollapseOnHashChange();\n\n        // Capture clicks on course section links.\n        window.addEventListener(\"hashchange\", this.fmtCollapseOnHashChange.bind(this));\n\n    }\n\n    /**\n     * Expand, and scroll to, the section specified in the URL bar.\n     *\n     * @param {HashChangeEvent?} event The triggering event, if any\n     */\n    /* eslint-disable no-unused-vars */\n    fmtCollapseOnHashChange(event) {\n            /* eslint-enable no-unused-vars */\n\n        // Find the specified section.\n        let anchor = window.location.hash;\n        if (!anchor.match(/^#sectionid-\\d+(?:-title)?$/)) {\n            return;\n        }\n        let oldStyle = false;\n        if (anchor.match(/^#sectionid-\\d+$/)) {\n            anchor = anchor + \"-title\";\n            oldStyle = true;\n            history.replaceState(history.state, \"\", anchor);\n        }\n        const selSectionHeaderDom =\n            document.querySelector(\".course-content ul.sections li.section.section-topic .sectionname\" + anchor);\n\n        // Exit if there is no recognised section.\n        if (!selSectionHeaderDom) {\n            return;\n        }\n\n        const selSectionDom = selSectionHeaderDom.closest(\"li.section.section-topic\");\n        const sectionId = selSectionDom.getAttribute('data-id');\n        const section = this.reactive.get('section', sectionId);\n\n        // Expand, if appropriate.\n        if (selSectionDom.matches(\".section-topic-collapsible\")\n                && (selSectionDom.querySelector(\".course-section-header .icons-collapse-expand.collapsed\")\n                    || section.contentcollapsed)) {\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                false\n            );\n        }\n\n        // Scroll to the specified section.\n        if (oldStyle) {\n            selSectionDom.scrollIntoView();\n        }\n\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        // CHANGED.\n        let sectionlist = [];\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionlist.push(sectionlistDom[sectionCount].dataset.id);\n        }\n        // END CHANGED.\n\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionlist, // CHANGED.\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        // ADDED.\n        let sectionCollapsible = {};\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionCollapsible[sectionlistDom[sectionCount].dataset.id] = true;\n        }\n        // END ADDED.\n        state.section.forEach(\n            section => {\n                if (sectionCollapsible[section.id]) { // ADDED.\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        target.style.display = (allexpanded && allcollapsed) ? \"none\" : \"block\"; // ADDED.\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '' || element.timed) { // CHANGED.\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id\n                    && (currentvalue != element.rawtitle || element.rawtitle == '' || element.timed)) { // CHANGED.\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details (Moodle <4.4).\n     * @param {Object} param.state the full state object (Moodle >=4.4).\n     */\n    _refreshCourseSectionlist(param) {\n        super._refreshCourseSectionlist(param);\n        const sectionsDom = this.element.querySelectorAll(this.selectors.SECTION);\n        for (let sdi = 0; sdi < sectionsDom.length; sdi++) {\n            const sectionDom = sectionsDom[sdi];\n            const section = this.reactive.get(\"section\", sectionDom.dataset.id);\n            if (!section) {\n                continue;\n            }\n            let refreshCms = false;\n            const pageSectionDom = this.element.querySelector(\".course-section[data-id='\" + section.pageid + \"']\");\n            const pageSectionDisplay = pageSectionDom.dataset.fmtonpage;\n            if (sectionDom.dataset.fmtonpage != pageSectionDisplay) {\n                sectionDom.dataset.fmtonpage = pageSectionDisplay;\n                sectionDom.style.display = (pageSectionDisplay == \"1\") ? \"block\" : \"none\";\n                if (pageSectionDisplay == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (section.visible == sectionDom.classList.contains(\"hidden\")) {\n                const badgeDom = sectionDom.querySelector(\"span.badge[data-type='hiddenfromstudents']\");\n                if (section.visible) {\n                    sectionDom.classList.remove(\"hidden\");\n                    badgeDom.classList.add(\"d-none\");\n                } else {\n                    sectionDom.classList.add(\"hidden\");\n                    badgeDom.classList.remove(\"d-none\");\n                }\n                if (sectionDom.dataset.fmtonpage == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (refreshCms) {\n                // Note: Visibility state doesn't get updated for CMs already rendered.\n                this._refreshSectionCmlist({element: section});\n            }\n            const menuDom = sectionDom.querySelector(\".course-section-header .section_action_menu\");\n            Templates.render(\"core_courseformat/local/content/section/controlmenu\", section.controlmenu).done(function(html) {\n                Templates.replaceNode(menuDom, html, \"\");\n            });\n        }\n        this._refreshAllSectionsToggler(this.reactive.stateManager.state);\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item); // CHANGED.\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item); // CHANGED.\n            }\n        );\n    }\n\n}"],"names":["Component","BaseComponent","create","descriptor","version","target","selectors","sectionReturn","this","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","TOGGLEALL","collapseElementIds","getElements","COLLAPSE","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","classes","STATEDREADY","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","PAGE","_scrollHandler","fmtCollapseOnHashChange","window","bind","event","anchor","location","hash","match","oldStyle","history","replaceState","selSectionHeaderDom","selSectionDom","closest","sectionId","getAttribute","section","get","matches","contentcollapsed","dispatch","scrollIntoView","preventDefault","isAllCollapsed","contains","COLLAPSED","sectionlist","sectionlistDom","querySelectorAll","sectionCount","length","push","dataset","allcollapsed","allexpanded","sectionCollapsible","forEach","style","display","remove","_refreshSectionNumber","SECTION","number","sectionid","inplace","inplaceeditable","getInplaceEditable","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","timed","rawtitle","setValue","_refreshCourseSectionlist","param","sectionsDom","sdi","sectionDom","refreshCms","pageSectionDisplay","pageid","fmtonpage","visible","badgeDom","_refreshSectionCmlist","menuDom","render","controlmenu","done","html","replaceNode","stateManager","_scanIndex","sections","item","Section","CM","cms","CmItem"],"mappings":";;;;;;;;;mhCAkCqBA,kBAAkBC,iBAOnCC,OAAOC,kBACGD,OAAOC,iBACRC,QAAUD,WAAWC,oBAYlBC,OAAQC,UAAWC,cAAeH,gBACnC,IAAII,KAAK,CACZC,QAASC,SAASC,eAAeN,QACjCO,UAAU,0CACVN,UAAAA,UACAC,cAAAA,cACAH,QAAAA,UASRS,WAAWC,YACFC,sBAEAC,iBAAiBR,KAAKC,QAAS,QAASD,KAAKS,wBAG5CC,UAAYV,KAAKW,WAAWX,KAAKF,UAAUc,cAC7CF,UAAW,OAILG,mBAAqB,IADFb,KAAKc,YAAYd,KAAKF,UAAUiB,WACRC,KAAIf,SAAWA,QAAQgB,KACxEP,UAAUQ,aAAa,gBAAiBL,mBAAmBM,KAAK,WAE3DX,iBAAiBE,UAAW,QAASV,KAAKoB,yBAC1CZ,iBAAiBE,UAAW,WAAWW,IAE1B,MAAVA,EAAEC,UACGF,mBAAmBC,WAG3BE,2BAA2BjB,OAGhCN,KAAKI,SAASoB,oBAEVxB,KAAKI,SAASqB,eACVC,iBAAgB1B,WAInBC,QAAQ0B,UAAUC,IAAI5B,KAAK6B,QAAQC,mBAIvCtB,iBACDR,KAAKC,QACL8B,aAAaC,wBACbhC,KAAKiC,yBAIJzB,iBACAR,KAAKJ,SAAW,WAAcM,SAAWA,SAASgC,cAAclC,KAAKF,UAAUqC,MAChF,SACAnC,KAAKoC,qBAIJC,0BAGLC,OAAO9B,iBAAiB,aAAcR,KAAKqC,wBAAwBE,KAAKvC,OAU5EqC,wBAAwBG,WAIhBC,OAASH,OAAOI,SAASC,SACxBF,OAAOG,MAAM,0CAGdC,UAAW,EACXJ,OAAOG,MAAM,sBACbH,QAAkB,SAClBI,UAAW,EACXC,QAAQC,aAAaD,QAAQxC,MAAO,GAAImC,eAEtCO,oBACF9C,SAASgC,cAAc,oEAAsEO,YAG5FO,iCAICC,cAAgBD,oBAAoBE,QAAQ,4BAC5CC,UAAYF,cAAcG,aAAa,WACvCC,QAAUrD,KAAKI,SAASkD,IAAI,UAAWH,WAGzCF,cAAcM,QAAQ,gCACdN,cAAcf,cAAc,4DACzBmB,QAAQG,wBACdpD,SAASqD,SACV,0BACA,CAACN,YACD,GAKJN,UACAI,cAAcS,iBAatBtC,mBAAmBoB,OACfA,MAAMmB,uBAGAC,eADSpB,MAAM3C,OAAOqD,QAAQlD,KAAKF,UAAUc,WACrBe,UAAUkC,SAAS7D,KAAK6B,QAAQiC,eAG1DC,YAAc,SACZC,eAAiBhE,KAAKC,QAAQgE,iBAAiB,qEAChD,IAAIC,aAAe,EAAGA,aAAeF,eAAeG,OAAQD,eAC7DH,YAAYK,KAAKJ,eAAeE,cAAcG,QAAQpD,SAIrDb,SAASqD,SACV,0BACAM,aACCH,gBASTrC,2BAA2BjB,aACjBT,OAASG,KAAKW,WAAWX,KAAKF,UAAUc,eACzCf,kBAIDyE,cAAe,EACfC,aAAc,EAEdC,mBAAqB,SACnBR,eAAiBhE,KAAKC,QAAQgE,iBAAiB,qEAChD,IAAIC,aAAe,EAAGA,aAAeF,eAAeG,OAAQD,eAC7DM,mBAAmBR,eAAeE,cAAcG,QAAQpD,KAAM,EAGlEX,MAAM+C,QAAQoB,SACVpB,UACQmB,mBAAmBnB,QAAQpC,MAC3BqD,aAAeA,cAAgBjB,QAAQG,iBACvCe,YAAcA,cAAgBlB,QAAQG,qBAIlD3D,OAAO6E,MAAMC,QAAWJ,aAAeD,aAAgB,OAAS,QAC5DA,eACAzE,OAAO8B,UAAUC,IAAI5B,KAAK6B,QAAQiC,WAClCjE,OAAOqB,aAAa,iBAAiB,IAErCqD,cACA1E,OAAO8B,UAAUiD,OAAO5E,KAAK6B,QAAQiC,WACrCjE,OAAOqB,aAAa,iBAAiB,IAiB7C2D,gCAAsB5E,QAACA,oBAEbJ,OAASG,KAAKW,WAAWX,KAAKF,UAAUgF,QAAS7E,QAAQgB,QAC1DpB,cAKLA,OAAOoB,qBAAgBhB,QAAQ8E,QAI/BlF,OAAOwE,QAAQW,UAAY/E,QAAQ8E,OAEnClF,OAAOwE,QAAQU,OAAS9E,QAAQ8E,aAG1BE,QAAUC,0BAAgBC,mBAAmBtF,OAAOqC,cAAclC,KAAKF,UAAUsF,kBACnFH,QAAS,OAGHI,aAAeJ,QAAQK,WACvBC,cAAgBN,QAAQO,aAEH,KAAvBP,QAAQK,YAAqBrF,QAAQwF,SAEjCF,eAAiBtF,QAAQgB,IACrBoE,cAAgBpF,QAAQyF,UAAgC,IAApBzF,QAAQyF,WAAkBzF,QAAQwF,OAC1ER,QAAQU,SAAS1F,QAAQyF,YAazCE,0BAA0BC,aAChBD,0BAA0BC,aAC1BC,YAAc9F,KAAKC,QAAQgE,iBAAiBjE,KAAKF,UAAUgF,aAC5D,IAAIiB,IAAM,EAAGA,IAAMD,YAAY3B,OAAQ4B,MAAO,OACzCC,WAAaF,YAAYC,KACzB1C,QAAUrD,KAAKI,SAASkD,IAAI,UAAW0C,WAAW3B,QAAQpD,QAC3DoC,qBAGD4C,YAAa,QAEXC,mBADiBlG,KAAKC,QAAQiC,cAAc,4BAA8BmB,QAAQ8C,OAAS,MACvD9B,QAAQ+B,aAC9CJ,WAAW3B,QAAQ+B,WAAaF,qBAChCF,WAAW3B,QAAQ+B,UAAYF,mBAC/BF,WAAWtB,MAAMC,QAAiC,KAAtBuB,mBAA6B,QAAU,OACzC,KAAtBA,qBACAD,YAAa,IAGjB5C,QAAQgD,SAAWL,WAAWrE,UAAUkC,SAAS,UAAW,OACtDyC,SAAWN,WAAW9D,cAAc,8CACtCmB,QAAQgD,SACRL,WAAWrE,UAAUiD,OAAO,UAC5B0B,SAAS3E,UAAUC,IAAI,YAEvBoE,WAAWrE,UAAUC,IAAI,UACzB0E,SAAS3E,UAAUiD,OAAO,WAEM,KAAhCoB,WAAW3B,QAAQ+B,YACnBH,YAAa,GAGjBA,iBAEKM,sBAAsB,CAACtG,QAASoD,gBAEnCmD,QAAUR,WAAW9D,cAAc,kEAC/BuE,OAAO,sDAAuDpD,QAAQqD,aAAaC,MAAK,SAASC,yBAC7FC,YAAYL,QAASI,KAAM,YAGxCrF,2BAA2BvB,KAAKI,SAAS0G,aAAaxG,OAQ/DC,sBAESwG,WACD/G,KAAKF,UAAUgF,QACf9E,KAAKgH,UACJC,MACU,IAAIC,iBAAQD,aAKtBF,WACD/G,KAAKF,UAAUqH,GACfnH,KAAKoH,KACJH,MACU,IAAII,gBAAOJ"}