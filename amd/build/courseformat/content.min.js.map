{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 onwards James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n        this.originalsinglesectionid = this.element.querySelector(\"ul.section-list\").dataset.originalsinglesectionid;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        let element = document.querySelector(target);\n        return new this({ // CHANGED.\n            element,\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        super.stateReady(state);\n\n        // Set the initial state of collapsible sections.\n        this.fmtCollapseOnHashChange();\n\n        // Capture clicks on course section links.\n        window.addEventListener(\"hashchange\", this.fmtCollapseOnHashChange.bind(this));\n\n    }\n\n    /**\n     * Expand, and scroll to, the section specified in the URL bar.\n     *\n     * @param {HashChangeEvent?} event The triggering event, if any\n     */\n    /* eslint-disable no-unused-vars */\n    fmtCollapseOnHashChange(event) {\n            /* eslint-enable no-unused-vars */\n\n        // Find the specified section.\n        let anchor = window.location.hash;\n        if (!anchor.match(/^#sectionid-\\d+(?:-title)?$/)) {\n            return;\n        }\n        let oldStyle = false;\n        if (anchor.match(/^#sectionid-\\d+$/)) {\n            anchor = anchor + \"-title\";\n            oldStyle = true;\n            history.replaceState(history.state, \"\", anchor);\n        }\n        const selSectionHeaderDom =\n            document.querySelector(\".course-content ul.section-list li.section.section-topic .sectionname\" + anchor);\n\n        // Exit if there is no recognised section.\n        if (!selSectionHeaderDom) {\n            return;\n        }\n\n        const selSectionDom = selSectionHeaderDom.closest(\"li.section.section-topic\");\n        const sectionId = selSectionDom.getAttribute('data-id');\n        const section = this.reactive.get('section', sectionId);\n\n        // Expand, if appropriate.\n        if (selSectionDom.matches(\".section-topic-collapsible\")\n                && (selSectionDom.querySelector(\".course-section-header .icons-collapse-expand.collapsed\")\n                    || section.contentcollapsed)) {\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                false\n            );\n        }\n\n        // Scroll to the specified section.\n        if (oldStyle) {\n            selSectionDom.scrollIntoView();\n        }\n\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        // CHANGED.\n        let sectionlist = [];\n        const togglerlistDom = this.element.querySelectorAll(\n            \".course-section \" +\n            this.selectors.SECTION_ITEM + \" \" + this.selectors.COLLAPSE\n        );\n        for (let togglerDom of togglerlistDom) {\n            sectionlist.push(togglerDom.closest(\".course-section\").dataset.id);\n        }\n        // END CHANGED.\n\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionlist, // CHANGED.\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return super.getWatchers().concat([\n            {watch: `section.fmtispage:updated`, handler: this._reloadSection},\n            {watch: `section.collapsible:updated`, handler: this._reloadSection},\n            {watch: `section.parentvisiblesan:updated`, handler: this._reloadSection},\n        ]);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        // ADDED.\n        let sectionCollapsible = {};\n        const togglerlistDom = this.element.querySelectorAll(\n            \".course-section \" +\n            this.selectors.SECTION_ITEM + \" \" + this.selectors.COLLAPSE\n        );\n        for (let togglerDom of togglerlistDom) {\n            sectionCollapsible[togglerDom.closest(\".course-section\").dataset.id] = true;\n        }\n        // END ADDED.\n        state.section.forEach(\n            section => {\n                if (sectionCollapsible[section.id]) { // ADDED.\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        target.style.visibility = (allexpanded && allcollapsed) ? \"hidden\" : \"visible\"; // ADDED.\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Update a course section name on the whole page.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionTitle(param) {\n        super._refreshSectionTitle(param);\n        const element = param.element;\n\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentitemid = inplace.getItemId();\n            if (currentitemid == element.id) { // CHANGED.\n                inplace.setValue(element.rawtitle);\n            }\n        }\n\n        // Update subtitle.\n        target.querySelector(\".section_subtitle\").textContent = element.subtitle;\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details (Moodle <4.4).\n     * @param {Object} param.state the full state object (Moodle >=4.4).\n     */\n    _refreshCourseSectionlist(param) {\n        const state = param.state;\n\n        const originalSingleSection = this.reactive.get(\"section\", this.originalsinglesectionid);\n        if (originalSingleSection && originalSingleSection.component) {\n            return;\n        }\n        let singleSectionId;\n        if (originalSingleSection) {\n            singleSectionId = (originalSingleSection.levelsan < 2) ? originalSingleSection.id : originalSingleSection.pageid;\n        } else {\n            singleSectionId = null;\n        }\n\n        let sectionlist = this.reactive.getExporter().listedSectionIds(state);\n        sectionlist = sectionlist.filter((sectionId) => (this.reactive.get(\"section\", sectionId).pageid == singleSectionId));\n        // ADDED LINE ABOVE.\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n\n        this._refreshAllSectionsToggler(this.reactive.stateManager.state);\n\n        // Update Add section button.\n        const addSectionDom = document.querySelector(\"div#fmt-course-addsection > a\");\n        addSectionDom.href = addSectionDom.href.replace(/\\binsertparentid=\\d+\\b/, \"insertparentid=\" + singleSectionId);\n\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item); // CHANGED.\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n\n        this._refreshAllSectionsToggler(this.reactive.stateManager.state); // ADDED.\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     */\n    _reloadSection(param0) {\n        const sectionDom = this.getElement(this.selectors.SECTION, param0.element.id);\n        if (!sectionDom || sectionDom.dataset?.fmtReloading) {\n            return;\n        }\n        sectionDom.dataset.fmtReloading = 1;\n        super._reloadSection(param0);\n    }\n\n}"],"names":["Component","BaseComponent","create","descriptor","originalsinglesectionid","this","element","querySelector","dataset","target","selectors","sectionReturn","document","reactive","stateReady","state","fmtCollapseOnHashChange","window","addEventListener","bind","event","anchor","location","hash","match","oldStyle","history","replaceState","selSectionHeaderDom","selSectionDom","closest","sectionId","getAttribute","section","get","matches","contentcollapsed","dispatch","scrollIntoView","_allSectionToggler","preventDefault","isAllCollapsed","TOGGLEALL","classList","contains","classes","COLLAPSED","sectionlist","togglerlistDom","querySelectorAll","SECTION_ITEM","COLLAPSE","togglerDom","push","id","getWatchers","super","concat","watch","handler","_reloadSection","_refreshAllSectionsToggler","getElement","allcollapsed","allexpanded","sectionCollapsible","forEach","style","visibility","add","setAttribute","remove","_refreshSectionTitle","param","SECTION","inplace","inplaceeditable","getInplaceEditable","getItemId","setValue","rawtitle","textContent","subtitle","_refreshCourseSectionlist","originalSingleSection","component","singleSectionId","levelsan","pageid","getExporter","listedSectionIds","filter","listparent","COURSE_SECTIONLIST","createSection","_createSectionItem","_fixOrder","dettachedSections","stateManager","addSectionDom","href","replace","_indexContents","_scanIndex","sections","item","Section","CM","cms","CmItem","param0","sectionDom","_sectionDom$dataset","fmtReloading"],"mappings":"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"}