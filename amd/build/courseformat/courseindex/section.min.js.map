{"version":3,"file":"section.min.js","sources":["../../../src/courseformat/courseindex/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index section component.\n *\n * This component is used to control specific course section interactions like drag and drop.\n *\n * @module     format_multitopic/courseformat/courseindex/section\n * @class      format_multitopic/courseformat/courseindex/section\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ComponentBase from 'core_courseformat/local/courseindex/section';\n\nexport default class Component extends ComponentBase {\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n     static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Validate if the drop data can be dropped over the component.\n     *\n     * @param {Object} dropdata the exported drop data.\n     * @returns {boolean}\n     */\n    validateDropData(dropdata) {\n        // We accept any course module.\n        if (dropdata?.type === 'cm') {\n            return true;\n        }\n        // We accept a section that fits\n        if (dropdata?.type === 'section') {\n            const sectionzeroid = this.course.sectionlist[0];\n            const state = this.reactive.stateManager.state;\n            const origin = state.section.get(dropdata.id);\n            let target = this.section;\n            while (target.levelsan > origin.levelsan) {\n                target = state.section.get(this.course.sectionlist[target.number - 1]);\n            }\n            const moveDirection = Math.sign(target.number - origin.number);\n            let targetPointer = target;\n            if (moveDirection > 0 && !target.indexcollapsed) {\n                let targetChild = target;\n                let targetPointerNext = target;\n                let collapsedLevel = 100;\n                let broke = false;\n                while (this.course.sectionlist.length > targetChild.number + 1\n                && state.section.get(this.course.sectionlist[targetChild.number + 1]).levelsan > target.levelsan) {\n                    targetChild = state.section.get(this.course.sectionlist[targetChild.number + 1]);\n                    if (collapsedLevel >= targetChild.levelsan) {\n                        collapsedLevel = targetChild.indexcollapsed ? targetChild.levelSan : 100;\n                    }\n                    targetPointer = targetPointerNext;\n                    if (collapsedLevel >= targetChild.levelsan) {\n                        targetPointerNext = targetChild;\n                    }\n                    if (targetChild.levelsan <= origin.levelsan) {\n                        broke = true;\n                        break;\n                    }\n                }\n                if (!broke) {\n                    targetPointer = targetPointerNext;\n                }\n            }\n            return origin.id != target.id && origin.id != sectionzeroid && target.id != sectionzeroid\n                && this.id == targetPointer.id;\n        }\n        return false;\n    }\n\n\n    /**\n     * Display the component dropzone.\n     *\n     * @param {Object} dropdata the accepted drop data\n     */\n    showDropZone(dropdata) {\n        if (dropdata.type == 'cm') {\n            this.getLastCm()?.classList.add(this.classes.DROPDOWN);\n        }\n        if (dropdata.type == 'section') {\n            const state = this.reactive.stateManager.state;\n            const origin = state.section.get(dropdata.id);\n            let target = this.section;\n            while (target.levelsan > origin.levelsan) {\n                target = state.section.get(this.course.sectionlist[target.number - 1]);\n            }\n            const moveDirection = Math.sign(target.number - origin.number);\n            let targetShow = target;\n            let targetShowBorder = moveDirection;\n            if (moveDirection > 0 && !target.indexcollapsed) {\n                let targetChild = target;\n                while (this.course.sectionlist.length > targetChild.number + 1\n                && state.section.get(this.course.sectionlist[targetChild.number + 1]).levelsan > target.levelsan) {\n                    targetChild = state.section.get(this.course.sectionlist[targetChild.number + 1]);\n                    if (targetChild.levelsan <= origin.levelsan) {\n                        targetShow = targetChild;\n                        targetShowBorder = -1;\n                        break;\n                    }\n                }\n            }\n            const targetHTML = document.querySelector(\n                \".courseindex-section[data-id='\" + targetShow.id + \"']\");\n            // The relative move of section depends on the section number.\n            if (targetShowBorder > 0) {\n                targetHTML.classList.add(this.classes.DROPDOWN);\n            } else {\n                targetHTML.classList.add(this.classes.DROPUP);\n            }\n        }\n    }\n\n    /**\n     * Hide the component dropzone.\n     *\n     * @param {Object} dropdata the accepted drop data\n     */\n    hideDropZone(dropdata) {\n        if (dropdata.type == 'cm') {\n            this.getLastCm()?.classList.remove(this.classes.DROPDOWN);\n        }\n        if (dropdata.type == 'section') {\n            const state = this.reactive.stateManager.state;\n            const origin = state.section.get(dropdata.id);\n            let target = this.section;\n            while (target.levelsan > origin.levelsan) {\n                target = state.section.get(this.course.sectionlist[target.number - 1]);\n            }\n            const moveDirection = Math.sign(target.number - origin.number);\n            let targetShow = target;\n            let targetShowBorder = moveDirection;\n            if (moveDirection > 0 && !target.indexcollapsed) {\n                let targetChild = target;\n                while (this.course.sectionlist.length > targetChild.number + 1\n                && state.section.get(this.course.sectionlist[targetChild.number + 1]).levelsan > target.levelsan) {\n                    targetChild = state.section.get(this.course.sectionlist[targetChild.number + 1]);\n                    if (targetChild.levelsan <= origin.levelsan) {\n                        targetShow = targetChild;\n                        targetShowBorder = -1;\n                        break;\n                    }\n                }\n            }\n            const targetHTML = document.querySelector(\n                \".courseindex-section[data-id='\" + targetShow.id + \"']\");\n            if (targetShowBorder > 0) {\n                targetHTML.classList.remove(this.classes.DROPDOWN);\n            } else {\n                targetHTML.classList.remove(this.classes.DROPUP);\n            }\n        }\n    }\n\n    /**\n     * Drop event handler.\n     *\n     * @param {Object} dropdata the accepted drop data\n     */\n    drop(dropdata) {\n        // Call the move mutation.\n        if (dropdata.type == 'cm') {\n            this.reactive.dispatch('cmMove', [dropdata.id], this.id);\n        }\n        if (dropdata.type == 'section') {\n            const state = this.reactive.stateManager.state;\n            const origin = state.section.get(dropdata.id);\n            let target = this.section;\n            while (target.levelsan > origin.levelsan) {\n                target = state.section.get(this.course.sectionlist[target.number - 1]);\n            }\n            const moveDirection = Math.sign(target.number - origin.number);\n            let targetCall = target;\n            if (moveDirection > 0 && target.indexcollapsed) {\n                let targetChild = target;\n                while (this.course.sectionlist.length > targetChild.number + 1\n                && state.section.get(this.course.sectionlist[targetChild.number + 1]).levelsan > target.levelsan) {\n                    targetChild = state.section.get(this.course.sectionlist[targetChild.number + 1]);\n                    if (targetChild.levelsan >= origin.levelsan) {\n                        targetCall = targetChild;\n                    }\n                }\n            }\n            this.reactive.dispatch('fmtSectionMove', origin, targetCall);\n        }\n    }\n\n    /**\n     * Update a course index section using the state information.\n     *\n     * @param {Object} param details the update details.\n     * @param {Object} param.element the section element\n     */\n    _refreshSection({element}) {\n        super._refreshSection({element});\n        const linkHTML = this.element.querySelector(\"a.courseindex-link\");\n        const link = element.sectionurl.replace(\"&amp;\", \"&\");\n        if (linkHTML.href != link) {\n            linkHTML.href = link;\n        }\n    }\n\n}"],"names":["Component","ComponentBase","target","selectors","element","document","getElementById","validateDropData","dropdata","type","sectionzeroid","this","course","sectionlist","state","reactive","stateManager","origin","section","get","id","levelsan","number","targetPointer","Math","sign","indexcollapsed","targetChild","targetPointerNext","collapsedLevel","broke","length","levelSan","showDropZone","getLastCm","classList","add","classes","DROPDOWN","moveDirection","targetShow","targetShowBorder","targetHTML","querySelector","DROPUP","hideDropZone","remove","drop","dispatch","targetCall","_refreshSection","linkHTML","link","sectionurl","replace","href"],"mappings":"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"}