{"version":3,"file":"actions.min.js","sources":["../../../src/courseformat/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     format_multitopic/courseformat/content/actions\n * @class      format_multitopic/courseformat/content/actions\n * @copyright  2022 James Calder and Otago Polytechnic\n * @copyright  based on work by 2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content/actions';\n// import ModalFactory from 'core/modal_factory';\n// import ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {getList} from 'core/normalise';\n// import * as CourseEvents from 'core_course/events';\n// import Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-79179 is integrated.\nimport jQuery from 'jquery';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\nexport default class extends BaseComponent {\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursemodule', 'core'),\n            body: Templates.render('format_multitopic/courseformat/content/movecm', data), // CHANGED.\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        this._disableLink(currentElement);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery int this code can be replaced when MDL-79179 is integrated.\n        const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n        if (collapsibleId) {\n            // We cannot be sure we have # in the id element name.\n            collapsibleId = collapsibleId.replace('#', '');\n            jQuery(`#${collapsibleId}`).collapse('toggle');\n        }\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n}"],"names":["BaseComponent","target","event","cmId","dataset","id","cmInfo","this","reactive","get","preventDefault","editTools","_getClosestActionMenuToogler","exporter","getExporter","data","course","state","cmid","cmname","name","modalParams","title","body","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getBody","currentElement","querySelector","selectors","CMLINK","_disableLink","ContentTree","CONTENTTREE","SECTION","SECTIONNODE","TOGGLER","MODALTOGGLER","COLLAPSE","ENTER","SECTIONLINK","sectionnode","closest","toggler","find","collapsibleId","attr","replace","collapse","addEventListener","matches","undefined","for","getAttribute","targetSectionId","targetCmId","dropData","cmDraggableData","sectionid","nextcmid","section","cmlist","dispatch","_destroyModal"],"mappings":";;;;;;;;;;;;qSA0CgB,OAAQ,CAAC,oBAAqB,mBAAoB,UAAW,kCAEhDA,sCAQJC,OAAQC,+BAEnBC,KAAOF,OAAOG,QAAQC,OACvBF,kBAGCG,OAASC,KAAKC,SAASC,IAAI,KAAMN,MAEvCD,MAAMQ,uBAGAC,UAAYJ,KAAKK,6BAA6BX,QAG9CY,SAAWN,KAAKC,SAASM,cACzBC,KAAOF,SAASG,OAAOT,KAAKC,SAASS,OAG3CF,KAAKG,KAAOZ,OAAOD,GACnBU,KAAKI,OAASb,OAAOc,WAGfC,YAAc,CAChBC,OAAO,mBAAU,mBAAoB,QACrCC,KAAMC,mBAAUC,OAAO,gDAAiDV,OAItEW,YAAcnB,KAAKoB,0BAA0BN,aAE7CO,WAAY,sBAAQF,MAAMG,WAAW,OAGvCC,eAAiBF,UAAUG,wBAAiBxB,KAAKyB,UAAUC,4BAAmB9B,iBAC7E+B,aAAaJ,oBAGdK,qBACAP,UAAUG,cAAcxB,KAAKyB,UAAUI,aACvC,CACIC,QAAS9B,KAAKyB,UAAUM,YACxBC,QAAShC,KAAKyB,UAAUQ,aACxBC,SAAUlC,KAAKyB,UAAUQ,aACzBE,MAAOnC,KAAKyB,UAAUW,oBAMxBC,YAAcd,eAAee,QAAQtC,KAAKyB,UAAUM,aACpDQ,SAAU,mBAAOF,aAAaG,KAAKxC,KAAKyB,UAAUQ,kBACpDQ,oCAAgBF,QAAQ/B,KAAK,iDAAa+B,QAAQG,KAAK,QACvDD,gBAEAA,cAAgBA,cAAcE,QAAQ,IAAK,mCAChCF,gBAAiBG,SAAS,WAIzCvB,UAAUwB,iBAAiB,SAAUlD,cAC3BD,OAASC,MAAMD,WAChBA,OAAOoD,QAAQ,WAA+BC,IAAvBrD,OAAOG,QAAQmD,UAA2CD,IAAtBrD,OAAOG,QAAQC,aAG3EJ,OAAOuD,aAAa,4BAMpBC,gBACAC,cAJJxD,MAAMQ,iBAKoB,MAAtBT,OAAOG,QAAQmD,IAAa,OACtBI,SAAW9C,SAAS+C,gBAAgBrD,KAAKC,SAASS,MAAOhB,OAAOG,QAAQC,IAC9EoD,gBAAkBE,SAASE,UAC3BH,WAAaC,SAASG,aACnB,OACGC,QAAUxD,KAAKC,SAASC,IAAI,UAAWR,OAAOG,QAAQC,IAC5DoD,gBAAkBxD,OAAOG,QAAQC,GACjCqD,WAAaK,MAAAA,eAAAA,QAASC,OAAO,QAG5BxD,SAASyD,SAAS,SAAU,CAAC9D,MAAOsD,gBAAiBC,iBACrDQ,cAAcxC,MAAOf"}